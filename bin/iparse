#!/usr/bin/env python

'''
    Script to parse a C++ declaration block and re-indent it

    In your .vimrc, add the line
	map _ !iparse
    Then you can select multiple declarations (Ctrl-V) then hit
    Shift+_ and have it reformat the declaration block.
'''

import sys, os

# Alignment of arguments (after type declarations).  Setting to 8 will
# ensure that there are leading tabs.  The only other acceptable value
# would be 4.
ARGUMENT_INDENT = 4
TAB_WIDTH = 4

_keywords = {
    'const'		: True,
    'register'		: True,
    'static'		: True,
    'virtual'		: True,
    'inline'		: True,
    'SYS_DEPRECATED'	: True,
    'SYS_FORCE_INLINE'	: True,
    'SYS_NO_INLINE'	: True,
}

TAB = '<tab>'
TAB = '\t'

def countSpace(line):
    indent = 0
    for i in line:
	if i == ' ':
	    indent += 1
	elif i == '\t':
	    indent += TAB_WIDTH - indent%TAB_WIDTH
	else:
	    break
    return indent

def splitDeclaration(line):
    left = []
    angle = 0
    args = line.split()
    if not len(args) or args[0][0] == '/':
	return ('', line)
    for i in range(len(args)):
	left.append(args[i])
	if _keywords.has_key(args[i]):
	    pass
	else:
	    angle += args[i].count('<')
	    angle -= args[i].count('>')
	    if angle == 0 and args[i+1][0] != '<':
		break
    if i == len(args):
	return ('', line)
    # Get rid of space in declarations like "Foo <Bar <>>"
    lresult = [ left[0] ]
    for l in left[1:]:
	if l[0] != '<':
	    lresult.append(' ')
	lresult.append(l)

    # Combine the declaration & arguments
    left = ''.join(lresult)
    right = ' '.join(args[i+1:])
    return (left, right)

def makeIndent(n):
    s = ''
    while n >= TAB_WIDTH:
	s += TAB
	n -= TAB_WIDTH
    s += ' '*n
    return s

def declIndent(indent, dlen, slen, stars, decl):
    '''
	Given an indent, a declaration, we want to align the arguments
	using an optimal set of tabs & spaces
    '''
    # Start pos for spaces after the declaration
    indent = countSpace(indent)
    start = indent + len(decl)

    # End position (start of arguments)
    end = indent + dlen + slen - stars
    if end == start+1:
	return ' '
    result = ''
    while start/TAB_WIDTH < end/TAB_WIDTH:
	result += TAB
	start += TAB_WIDTH - start%TAB_WIDTH
    result += ' '*(end - start)
    return result

def indent(lines):
    nlines = len(lines)
    if not nlines:
	return
    decs = []
    args = []
    stars = []
    indent = countSpace(lines[0])
    indent = makeIndent(indent)
    dlen = 0
    slen = 0
    for i in range(nlines):
	d, a = splitDeclaration(lines[i])
	nstars = 0
	for s in a:
	    if s != '*' and s != '&':
		break
	    nstars += 1
	stars.append(nstars)
	decs.append(d)
	args.append(a)
	dlen = max(len(d), dlen)
	slen = max(nstars, slen)
    dlen += 1
    full = dlen + countSpace(indent)
    # Make the "end" a multiple of ARGUMENT_INDENT
    if full % ARGUMENT_INDENT != 0:
	dlen += ARGUMENT_INDENT - full%ARGUMENT_INDENT
    result = []
    for i in range(len(lines)):
	if not decs[i]:
	    result.append(args[i])
	else:
	    space = declIndent(indent, dlen, slen, stars[i], decs[i])
	    result.append('%s%s%s%s\n' %
		(indent, decs[i], space, args[i])
	)
    return result

if __name__ == "__main__":
    block = []
    for l in sys.stdin.readlines():
	block.append(l)
    block = indent(block)
    sys.stdout.write(''.join(block))
